generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts       Account[]
  budgets        Budget[]
  transactions   Transaction[]
  goals          Goal[]
  budgetTransfers BudgetTransfer[]
  payees         Payee[]
  aiPlans        AIPlan[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  plaidAccountId    String   @unique
  plaidAccessToken  String
  accountName       String
  accountType       String
  accountSubtype    String
  balance           Float    @default(0)
  availableBalance  Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  name      String
  amount    Float    @default(0)
  spent     Float    @default(0)
  category  String
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions             Transaction[]
  budgetTransfersFrom      BudgetTransfer[] @relation("FromBudget")
  budgetTransfersTo        BudgetTransfer[] @relation("ToBudget")

  @@unique([userId, name, month, year])
  @@index([userId])
}

model Transaction {
  id                  String    @id @default(cuid())
  userId              String
  accountId           String
  budgetId            String?
  payeeId             String?
  plaidTransactionId  String?   @unique
  amount              Float
  description         String
  category            String
  subcategory         String?
  date                DateTime
  cleared             Boolean   @default(false)
  approved            Boolean   @default(false)
  isManual            Boolean   @default(false)
  flagColor           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  budget        Budget?         @relation(fields: [budgetId], references: [id])
  payee         Payee?          @relation(fields: [payeeId], references: [id])
  budgetTransfer BudgetTransfer?

  @@index([userId])
  @@index([accountId])
  @@index([budgetId])
  @@index([date])
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  targetAmount  Float
  currentAmount Float     @default(0)
  type          String    @default("savings")
  targetDate    DateTime?
  priority      Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BudgetTransfer {
  id              String   @id @default(cuid())
  userId          String
  fromBudgetId    String
  toBudgetId      String
  amount          Float
  reason          String
  transactionId   String?  @unique
  createdAt       DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromBudget  Budget       @relation("FromBudget", fields: [fromBudgetId], references: [id], onDelete: Cascade)
  toBudget    Budget       @relation("ToBudget", fields: [toBudgetId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@index([userId])
}

model Payee {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    String?
  isInternal  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId])
}

model AIPlan {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  goals       String   @default("Financial improvement")
  steps       String
  priority    String   @default("medium")
  status      String   @default("pending")
  category    String?
  metadata    String?
  timeframe   String?
  estimatedImpact String?
  aiGenerated Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}