generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts       Account[]
  budgets        Budget[]
  transactions   Transaction[]
  goals          Goal[]
  budgetTransfers BudgetTransfer[]
  payees         Payee[]
  aiPlans        AIPlan[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  plaidAccountId    String   @unique
  plaidAccessToken  String
  accountName       String
  accountType       String
  accountSubtype    String?
  balance           Float
  availableBalance  Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Budget {
  id         String   @id @default(cuid())
  userId     String
  name       String
  amount     Float
  spent      Float    @default(0)
  category   String
  month      Int
  year       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  fromTransfers     BudgetTransfer[] @relation("FromBudgetTransfers")
  toTransfers       BudgetTransfer[] @relation("ToBudgetTransfers")
  
  @@unique([userId, name, month, year])
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  accountId         String
  budgetId          String?
  payeeId           String?
  plaidTransactionId String  @unique
  amount            Float
  description       String
  category          String
  subcategory       String?
  date              DateTime
  cleared           Boolean  @default(true)  // Whether transaction has been cleared by the bank
  isManual          Boolean  @default(false) // Whether this was manually entered
  approved          Boolean  @default(true)  // Whether transaction has been approved by user (auto-true for manual entries)
  matchedTransactionId String? // ID of the Plaid transaction this manual entry matches
  flagColor         String?  // Color flag for user organization
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account         Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  budget          Budget?          @relation(fields: [budgetId], references: [id])
  payee           Payee?           @relation(fields: [payeeId], references: [id])
  budgetTransfers BudgetTransfer[]
}

model Goal {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String?
  targetAmount  Float
  currentAmount Float    @default(0)
  targetDate    DateTime?
  type          String   // 'savings' or 'debt'
  priority      Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetTransfer {
  id            String   @id @default(cuid())
  userId        String
  fromBudgetId  String
  toBudgetId    String
  amount        Float
  transactionId String?  // Optional - links to the transaction that triggered this transfer
  reason        String   // Description of why the transfer was made
  automated     Boolean  @default(true) // Whether this was an automated transfer
  createdAt     DateTime @default(now())
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromBudget  Budget       @relation("FromBudgetTransfers", fields: [fromBudgetId], references: [id])
  toBudget    Budget       @relation("ToBudgetTransfers", fields: [toBudgetId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])
}

model Payee {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    String?  // Optional category for the payee
  isActive    Boolean  @default(true)
  isInternal  Boolean  @default(false) // True for transfer payees like "Payment: Credit Card Name"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@unique([userId, name])
}

model AIPlan {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String
  category        String   // 'debt', 'savings', 'spending', 'emergency', 'goals'
  priority        String   // 'critical', 'high', 'medium', 'low'
  timeframe       String
  estimatedImpact String
  steps           String   // JSON array of implementation steps
  status          String   @default("active") // 'active', 'in_progress', 'completed', 'paused'
  aiGenerated     Boolean  @default(true)
  metadata        String?  // JSON object for additional AI data (confidence, urgency, etc.)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}